/*
 * IronJacamar, a Java EE Connector Architecture implementation
 * Copyright 2014, Red Hat Inc, and individual contributors
 * as indicated by the @author tags. See the copyright.txt file in the
 * distribution for a full listing of individual contributors.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the Eclipse Public License 1.0 as
 * published by the Free Software Foundation.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the Eclipse
 * Public License for more details.
 *
 * You should have received a copy of the Eclipse Public License 
 * along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */

dependencies {
  testCompile(libraries.byteman) {
    transitive = false
  }
  testCompile(libraries.byteman_submit) {
    transitive = false
  }
  testCompile(libraries.fungal) {
    transitive = false
  }
  testCompile(libraries.fungal_cli) {
    transitive = false
  }
  testCompile(libraries.hibernate_validator) {
    transitive = false
  }
  testCompile(libraries.jandex) {
    transitive = false
  }
  testCompile(libraries.javax_inject) {
    transitive = false
  }
  testCompile(libraries.jboss_common) {
    transitive = false
  }
  testCompile(libraries.jboss_jaspi) {
    transitive = false
  }
  testCompile(libraries.jboss_logging) {
    transitive = false
  }
  testCompile(libraries.jboss_logging_manager) {
    transitive = false
  }
  testCompile(libraries.jboss_logging_manager_log4j) {
    transitive = false
  }
  testCompile(libraries.jboss_naming) {
    transitive = false
  }
  testCompile(libraries.jboss_stdio) {
    transitive = false
  }
  testCompile(libraries.jboss_threads) {
    transitive = false
  }
  testCompile(libraries.jgroups) {
    transitive = false
  }
  testCompile(libraries.junit)
  testCompile(libraries.log4j) {
    transitive = false
  }
  testCompile(libraries.narayana_jta) {
    transitive = false
  }
  testCompile(libraries.narayana_integration) {
    transitive = false
  }
  testCompile(libraries.narayana_spi) {
    transitive = false
  }
  testCompile(libraries.picketbox) {
    transitive = false
  }
  testCompile(libraries.shrinkwrap_api) {
    transitive = false
  }
  testCompile(libraries.shrinkwrap_impl) {
    transitive = false
  }
  testCompile(libraries.shrinkwrap_spi) {
    transitive = false
  }
  testCompile(libraries.shrinkwrap_descriptors_api) {
    transitive = false
  }
  testCompile(libraries.shrinkwrap_descriptors_impl) {
    transitive = false
  }
  testCompile(libraries.shrinkwrap_descriptors_spi) {
    transitive = false
  }
  testCompile(libraries.transaction_spec) {
    transitive = false
  }
  testCompile(libraries.validation_spec) {
    transitive = false
  }
  testCompile parent.subprojects.sourceSets.main.output
}

compileTestJava {
  classpath += project.sourceSets.main.runtimeClasspath
}

test {
  exclude '**/*PerfTestCase*'
  jacoco {
    append = false
  }
  finalizedBy jacocoTestReport
}

jar.enabled = false

jacocoTestReport {
  group = "Reporting"
  description = "Generate Jacoco coverage reports after running tests."
  sourceDirectories = files(parent.subprojects.sourceSets.main.allSource.srcDirs)
  classDirectories  = files(parent.subprojects.sourceSets.main.output)
  reports {
    xml.enabled true
    csv.enabled false
    html.enabled true
  }
}
